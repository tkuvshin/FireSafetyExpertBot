import os
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from openai import OpenAI
from flask import Flask
import threading
import asyncio

# --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# OpenAI
client_gpt = OpenAI(api_key=os.environ["MyKey2"])

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope )
client_gs = gspread.authorize(creds)

SPREADSHEET_ID = os.environ["sheets_id"]
sheet = client_gs.open_by_key(SPREADSHEET_ID).sheet1
records = sheet.get_all_records()

# Telegram
TELEGRAM_BOT_TOKEN = os.environ["Telegram_Bot_Token"]
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# --- 2. –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    print(f"\n–ü–û–õ–£–ß–ï–ù –í–û–ü–†–û–°: {user_message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for record in records:
        if record["question"].strip().lower() == user_message.strip().lower():
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ")
            await update.message.reply_text(record["answer"])
            return

    # GPT
    prompt = f"""
–¢—ã-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞—Ä–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ...
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"
–û—Ç–≤–µ—Ç:
"""
    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT...")
    response = client_gpt.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        temperature=0.3
    )
    gpt_answer = response.choices[0].message.content.strip()
    print(f"‚úÖ –û–¢–í–ï–¢ GPT: {gpt_answer[:300]}...")
    await update.message.reply_text(gpt_answer)

application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

# --- 3. Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –û–î–ù–û –ò –¢–û –ñ–ï –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `app`
app = Flask(__name__)

@app.route("/")
def home():
    # –≠—Ç–æ—Ç —Ä–æ—É—Ç –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Ö–æ—Å—Ç–∏–Ω–≥ –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    return "Flask-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."

# --- 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é polling —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
    # run_polling —Å–∞–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç initialize –∏ start
    application.run_polling()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ü–ï–†–ï–î –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º ---
# –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Flask, –∫–æ—Ç–æ—Ä–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
# –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Gunicorn)
@app.before_request
def start_bot_thread():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    if not any(t.name == 'telegram_bot_thread' for t in threading.enumerate()):
        print("–°–æ–∑–¥–∞—é –∏ –∑–∞–ø—É—Å–∫–∞—é –ø–æ—Ç–æ–∫ –¥–ª—è –±–æ—Ç–∞...")
        bot_thread = threading.Thread(target=run_bot, name='telegram_bot_thread', daemon=True)
        bot_thread.start()

# –ë–ª–æ–∫ if __name__ == "__main__" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.
# –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ Timeweb –æ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ù–ï –ë–£–î–ï–¢.
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
    app.run(host="0.0.0.0", port=8000, debug=True)


