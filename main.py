
import os
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from openai import OpenAI
from rapidfuzz import fuzz
from flask import Flask, request

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client_gpt = OpenAI(api_key=os.environ["MyKey2"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client_gs = gspread.authorize(creds)

SPREADSHEET_ID = os.environ["sheets_id"]
sheet = client_gs.open_by_key(SPREADSHEET_ID).sheet1
records = sheet.get_all_records()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    print(f"\n–ü–û–õ–£–ß–ï–ù –í–û–ü–†–û–°: {user_message}")

    max_score = 0
    best_answer = None

    for record in records:
        score = fuzz.token_set_ratio(user_message.lower(), record["question"].lower())
        if score > max_score:
            max_score = score
            best_answer = record["answer"]

    if max_score >= 70:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ, score={max_score}")
        await update.message.reply_text(best_answer)
        return

    prompt = f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –†–§. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –§–ó, –ì–û–°–¢, –°–ù–∏–ü, –ü–ü–ë, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ, –¥–µ–ª–æ–≤—ã–º —è–∑—ã–∫–æ–º.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"

–û—Ç–≤–µ—Ç:
"""

    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞...")

    response = client_gpt.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."},
                  {"role": "user", "content": prompt}],
        max_tokens=300,
        temperature=0.3
    )

    gpt_answer = response.choices[0].message.content.strip()
    print(f"‚úÖ –û–¢–í–ï–¢ GPT: {gpt_answer[:300]}...")

    await update.message.reply_text(gpt_answer)

async def main():
    TELEGRAM_BOT_TOKEN = os.environ["Telegram_Bot_Token"]
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=os.environ["WEBHOOK_URL"]
    )

if __name__ == "__main__":
    import asyncio
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
