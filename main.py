import os
import json
import asyncio
from flask import Flask, request
import telegram
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from openai import OpenAI
import gspread
from google.oauth2.service_account import Credentials

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client_gpt = OpenAI(api_key=os.environ["MyKey2"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.environ["GOOGLE_CREDS_JSON"]
creds_dict = json.loads(creds_json)
credentials = Credentials.from_service_account_info(creds_dict, scopes=scope)
client_gs = gspread.authorize(credentials)
SPREADSHEET_ID = os.environ["sheets_id"]
sheet = client_gs.open_by_key(SPREADSHEET_ID).sheet1

# Flask
app = Flask(__name__)

# Telegram Application
bot_token = os.environ["Telegram_Bot_Token"]
application = ApplicationBuilder().token(bot_token).build()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    print(f"–ü–û–õ–£–ß–ï–ù –í–û–ü–†–û–°: {user_message}")

    records = sheet.get_all_records()

    for record in records:
        if record["question"].strip().lower() == user_message.lower():
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ")
            await update.message.reply_text(record["answer"])
            return

    prompt = f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –†–§. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –§–ó, –ì–û–°–¢, –°–ù–∏–ü, –ü–ü–ë, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ, –¥–µ–ª–æ–≤—ã–º —è–∑—ã–∫–æ–º.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"

–û—Ç–≤–µ—Ç:
"""
    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT...")
    response = client_gpt.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        temperature=0.3
    )
    gpt_answer = response.choices[0].message.content.strip()
    print(f"‚úÖ –û–¢–í–ï–¢ GPT: {gpt_answer[:200]}...")
    await update.message.reply_text(gpt_answer)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

# Webhook –¥–ª—è Telegram —á–µ—Ä–µ–∑ Flask
@app.route("/", methods=["POST"])
async def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return "ok"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Flask
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.create_task(application.initialize())
    loop.create_task(application.start())
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

